Test-DONE
=========

+ sub_if_gte (avoid branches/if ...)  +small enh+ (also needed for vectors)
- __local tmps instead of res->... intermediates?  - no effect -
- inline small functions (automatically done)
- divergent branches (bad, bad, bad)
- select vs. "... ? ... : ..." 
+ 3x24-bit kernel
- ((x<<8)>>8) instead of (x&0xFFFFFF)   (found in the forum) : no difference at all!
+ loop-unroll: OK, 64-loop in mod: unrolled 10% faster on GPU, no (big) change on CPU
+ vectorize (4 FC's at once?)
+ mad(ulong, ...) runs implicit I_TO_F + MULADD_e (float) ... SLOW!!!
+ hi= (hi << 1) + ((lo & 0x8000000000000000) ? 1 : 0) faster than (hi<<1)+(lo>>63ULL)

Test-TODO
=========
- 4x24-bit kernel
- in mod144_72: if q.d5!=0 ... will most likely skip the first block for one in 19 executions. Is that worth it?


TODO
====
+DONE+ - only set new params for subsequent kernel-runs
+DONE+ - cleanup mystuff
+DONE+ - cleanup cuda
+DONE+ - cleanup kernel file => test-kernel
+DONE+ - cleanup AMD licensed stuff
+DONE+ - KERNEL trace only the first thread
+DONE+ - check limits for 95-bit kernel
+DONE+ - add 64-bit kernel
+DONE+ - port 72 (3x24 bit) kernel
+DONE+ - call 72-bit kernel correctly
+DONE+ - port barrett kernels (div, mul, mod)
+DONE+ - create a kernel struct: name, cl_kernel_id, bit_min, bit_max
+DONE+ - save a copy / rev control
+DONE+ - re-enable auto-adjust of sieve-limit (measure wait-time)
+DONE+ - signal handler
+DONE+ - max 128 threads per block ... needed at all?
+DONE+ - --help
+DONE+ - complain about bad args
+DONE+ - calibrate auto-adjust
- -d g
- merge mfaktc 0.18
- make/allow for small exps/bit-levels
- verify factors using the modulo-kernels and clEnqueueTask 
- http://mersenneforum.org/showpost.php?p=258140&postcount=7 trialfactor_72.cl
- div/mul-modulo for 96 bits
- kernel trace more specific (bitmask)
- "restrict" "const" wherever possible
- 4 threads - 4 classes at once - also in host code to maximize GPU-utilization in a single program
- error handling: RES[0] -= 100; save up to 3 ints in RES; only in single-vec
- MODBASECASE_NN_BIG_ERROR in mod_144_72
- GPU sieve
- clGetKernelWorkGroupInfo in load kernels: preferred size, local mem
- evaluate max mem alloc (device info)
- optimize 72-bit kernel for small vs. large factors (skip some converts depending on the size)


