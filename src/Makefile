# This file is part of mfaktc (mfakto).
# Copyright (C) 2009 - 2011, 2014  Oliver Weihe (o.weihe@t-online.de)
#                                  Bertram Franz (bertramf@gmx.net)
#
# mfaktc (mfakto) is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# mfaktc (mfakto) is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with mfaktc (mfakto).  If not, see <http://www.gnu.org/licenses/>.
#
# Version 0.15
#
#
# Example: "make bitness=32 static=yes" to compile for 32 bits and link
#          statically

# Check if bitness requested, set x86_64(64bit) as default
BITS := x86_64
BITFLAG := -m64
ifdef bitness
  ifeq ($(bitness), 32)
    BITFLAG := -m32
    BITS := x86
  endif
  ifeq ($(bitness), 64)
    BITFLAG := -m64
    BITS := x86_64
  endif
endif

# Check if building statically was requested
ifdef static
  ifeq ($(static), yes)
    STATIC := -static
  endif
endif

# some commands won't work on Windows
ifeq ($(OS), Windows_NT)
  CP = copy
  RM = del /F
else
  CP = cp
  RM = rm -f
endif

# where is the OpenCL SDK installed?

# Change needed for compilation with amdgpu-pro
# AMD_APP_DIR = /opt/amdgpu-pro/opencl

AMD_APP_DIR = /opt/rocm/opencl
AMD_APP_INCLUDE = -I$(AMD_APP_DIR)/include
AMD_APP_LIB = -L$(AMD_APP_DIR)/lib/$(BITS)

# optimize or debug
#OPTIMIZE_FLAG = -O3
#OPTIMIZE_FLAG = -O3 -funroll-loops  -finline-functions -frerun-loop-opt -fgcse-sm -fgcse-las
OPTIMIZE_FLAG = -O3 -funroll-loops  -ffast-math -finline-functions -frerun-loop-opt -fgcse-sm -fgcse-las -flto
#OPTIMIZE_FLAG = -g

# Compiler settings for .c files (CPU)
CC = gcc
CPP = $(CC)
CFLAGS = $(BITFLAG) -Wall $(OPTIMIZE_FLAG) $(AMD_APP_INCLUDE) -DBUILD_OPENCL
CPP_FLAGS =
#CFLAGS_EXTRA_SIEVE = -funroll-all-loops
#CFLAGS_EXTRA_SIEVE = -funroll-all-loops -funsafe-loop-optimizations -fira-region=all -fsched-spec-load -fsched-stalled-insns=10 -fsched-stalled-insns-dep=10 -floop-parallelize-all -fvariable-expansion-in-unroller -fno-align-labels
CFLAGS_EXTRA_SIEVE = -funroll-all-loops -funsafe-loop-optimizations -fira-region=all -fsched-spec-load -fsched-stalled-insns=10 -fsched-stalled-insns-dep=10 -fno-align-labels


# Linker
LD = g++
LDFLAGS = $(BITFLAG) $(STATIC) $(OPTIMIZE_FLAG) $(AMD_APP_LIB) -lOpenCL

##############################################################################

CSRC  = sieve.c timer.c parse.c read_config.c mfaktc.c checkpoint.c \
	signal_handler.c filelocking.c output.c
CLSRC = barrett15.cl  barrett.cl  common.cl  gpusieve.cl  mfakto_Kernels.cl  montgomery.cl  mul24.cl

COBJS  = $(CSRC:.c=.o) mfakto.o gpusieve.o perftest.o menu.o kbhit.o

##############################################################################

all: ../mfakto ../barrett15.cl  ../barrett.cl  ../common.cl  ../gpusieve.cl  ../mfakto_Kernels.cl  ../montgomery.cl  ../mul24.cl ../datatypes.h ../tf_debug.h ../mfakto.ini

../mfakto : $(COBJS)
	$(LD) $^ $(LDFLAGS) -o $@

clean :
	$(RM) *.o *~

sieve.o : sieve.c
	$(CC) $(CFLAGS) $(CFLAGS_EXTRA_SIEVE) -c $< -o $@

%.o : %.c
	$(CC) $(CFLAGS) -c $< -o $@

%.o : %.cpp
	$(CPP) $(CFLAGS) $(CPP_FLAGS) -c $< -o $@

../%.cl : %.cl
	$(CP) $< ..

../%.h : %.h
	$(CP) $< ..

../%.ini : %.ini
	$(CP) $< ..

##############################################################################

# dependencies generated by cpp -MM (manually replaced AMD_APP_DIR)
#

checkpoint.o: checkpoint.c params.h timer.h

filelocking.o: filelocking.c

mfaktc.o: mfaktc.c $(AMD_APP_DIR)/include/CL/cl.h \
 $(AMD_APP_DIR)/include/CL/cl_platform.h params.h my_types.h compatibility.h \
 sieve.h read_config.h parse.h timer.h checkpoint.h signal_handler.h \
 filelocking.h perftest.h mfakto.h gpusieve.h output.h selftest-data.h

output.o: output.c params.h my_types.h $(AMD_APP_DIR)/include/CL/cl.h \
 $(AMD_APP_DIR)/include/CL/cl_platform.h output.h filelocking.h \
 compatibility.h

parse.o: parse.c compatibility.h filelocking.h parse.h

read_config.o: read_config.c params.h my_types.h \
 $(AMD_APP_DIR)/include/CL/cl.h $(AMD_APP_DIR)/include/CL/cl_platform.h

sieve.o: sieve.c params.h compatibility.h

signal_handler.o: signal_handler.c params.h my_types.h \
 $(AMD_APP_DIR)/include/CL/cl.h $(AMD_APP_DIR)/include/CL/cl_platform.h \
 compatibility.h

timer.o: timer.c timer.h compatibility.h

gpusieve.o: gpusieve.cpp $(AMD_APP_DIR)/include/CL/cl.h \
 $(AMD_APP_DIR)/include/CL/cl_platform.h my_types.h params.h compatibility.h

mfakto.o: mfakto.cpp $(AMD_APP_DIR)/include/CL/cl.h \
 $(AMD_APP_DIR)/include/CL/cl_platform.h params.h my_types.h compatibility.h \
 read_config.h parse.h sieve.h timer.h checkpoint.h filelocking.h \
 perftest.h mfakto.h output.h gpusieve.h signal_handler.h

perftest.o: perftest.cpp $(AMD_APP_DIR)/include/CL/cl.h \
 $(AMD_APP_DIR)/include/CL/cl_platform.h params.h my_types.h compatibility.h \
 read_config.h parse.h sieve.h timer.h checkpoint.h filelocking.h \
 signal_handler.h mfakto.h
menu.o: menu.h compatibility.h my_types.h
kbhit.o: kbhit.h
