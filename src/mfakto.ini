# Version 0.15
#

# Verbosity: defines the amount of screen output of mfakto. Overridden by command line option -v
# 0 = very little
# 1 = normal (default)
# 2 = verbose
# 3 = debug (also displays OpenCL's compile log and the results array of each kernel invocation)

Verbosity=1


# SievePrimes defines how far the factor candidates (FCs) are presieved on the
# CPU. The first <SievePrimes> odd primes are used to sieve the FCs.
#
# Minimum: SievePrimes=SievePrimesMin
# Maximum: SievePrimes=SievePrimesMax
#
# Default: SievePrimes=25000

SievePrimes=25000


# Set this to 1 to enable automatic adjustments of SievePrimes during
# runtime based on the "average wait times". 0 uses the fixed value above.
#
# Default: SievePrimesAdjust=1

SievePrimesAdjust=1


# If SievePrimesAdjust=1, then SievePrimesMin defines the lowest limit for
# SievePrimes. Lower values may reduce CPU consumption, 
# higher values enforce a higher TF efficiency at the cost of more
# CPU resources. Lowering this value below 5000 is not advised as
# that dramatically reduces the quality of the siever output, increasing
# the share of futile GPU work (due to testing composite factor candidates).
#
# Minimum: SievePrimesMin=256
# Maximum: SievePrimesMin=999999
#
# Default: SievePrimesMin=5000

SievePrimesMin=5000


# If SievePrimesAdjust=1, then SievePrimesMax defines the upper limit for
# SievePrimes. Lower values reduce main memory consumption
# (8k per 1k SievePrimesMax). Higher values allow for higher sieving if enough
# CPU resources are available.
#
# Minimum: SievePrimesMax=5000
# Maximum: SievePrimesMax=1000000
#
# Default: SievePrimesMax=200000

SievePrimesMax=200000


# The following value is used only, if SIEVE_SIZE_LIMIT was not set when compiling.
# Define the block size of the sieve in kiB. For small SievePrimes values, the
# size of the L1 cache is a good choice, starting at SievePrimes ~ 100000,
# bigger values are more efficient. Use mfakto --perftest to test your CPU
# for the best values. Intel CPUs often have 32 kiB L1 cache, AMD 64 kiB,
# Bulldozer 16 kiB. On Bulldozer, however, it makes more sense to use the
# L2 cache size, 256 kiB.
#
# Minimum: SieveSizeLimit=12
# Maximum: SieveSizeLimit=2000   (not enforced, but maximum useful value)
#
# Default: SieveSizeLimit=64

SieveSizeLimit=64


# Set the number of data sets used by mfakto.
# NumStreams must be >= 1. In this case mfakto can process one
# data set on the GPU while the CPU preprocesses the next one. When
# NumStreams is >= 2 than the time needed to upload (CPU->GPU transfer)
# the data sets can be hidden (if the hardware supports it, but OpenCL
# does not yet support this).
# On Linux systems 3 seems a good number. There are comments that
# Windows systems need a greater number of streams.
# A greater number increases the memory consumed by mfakto (host and GPU
# memory). The current limit for the number of streams is 10!
#
# Default: NumStreams=3

NumStreams=3


# Set the number of factor candidates that a single GPU-thread will work
# on in parallel. This increases the execution unit utilization but
# requires more registers. When more space is needed than available in
# registers, then (slow) scratchpad memory (global memory) will be used.
# On most hardware this will start happening at vector size 8.
# On a HD6870, a vector size of 4 is fastest except for the barrett_92
# kernel which runs about 0.8% faster with vector size 8.
# The barrett24 kernel is fastest with vector size 8.
# On GCN (HD77xx-HD79xx), use VectorSize=2 as there are less registers available.
#
# Allowed sizes are 1, 2, 4, 8, 16.
#
# Default: VectorSize=2

VectorSize=2


# The GridSize sets the number of threads per grid (how many GPU threads are
# started at once). (not used when sieving on GPU)
#   GridSize = 0: threads per grid =  131072
#   GridSize = 1: threads per grid =  262144
#   GridSize = 2: threads per grid =  524288
#   GridSize = 3: threads per grid = 1048576
#   GridSize = 4: threads per grid = 2097152
# A smaller GridSize has more overhead than a bigger GridSize for long
# running jobs. For really small jobs there can be a small benefit on
# computation time if the GridSize is small. A smaller GridSize directly
# reduces the runtime per kernel launch and might result in a better
# interactivity and may be required for a stable UI on slower GPUs.
#
# Default: GridSize=4

GridSize=4


# WorkFile: the name of the file which contains the factoring assignments.
# e.g.
# worktodo.ini (Prime95 v24 and earlier)
# worktodo.txt (Prime95 v25 and newer)
#
# Default: WorkFile=worktodo.txt

WorkFile=worktodo.txt

# ResultsFile: the name of the file which will contain the factoring results.
#
# Default: ResultsFile=results.txt

ResultsFile=results.txt


# Checkpoints=0: disable checkpoints
# Checkpoints=1: enable checkpoints
# Checkpoints=n, n>1: write a checkpoint after n classes have been tested.
# Checkpoints are needed for resume capability. After a class is finished a
# checkpoint file can be written. When mfakto is interrupted during the run and
# restarted later it will begin at the last processed class.
# Use Checkpoints=961 (or bigger) to never write a checkpoint except when ^C
# is used to abort mfakto.
#
# Default: Checkpoints=1

Checkpoints=1


# CheckpointDelay is the minimum time in seconds between two checkpoint writes.
# Only evaluated if Checkpoints=1
# Allowed values are 0 <= CheckpointDelay <= 3600.
#
# Minimum: CheckpointDelay=0   (write a checkpoint after each class)
# Maximum: CheckpointDelay=3600
#
# Default: CheckpointDelay=300

CheckpointDelay=300

# Allows you to split an assignment into multiple bit ranges.
# Note that many mfakto-kernels can handle only one bit level at a time,
# i.e. in order to use them, Stages needs to be enabled.
# 0 = disabled
# 1 = enabled
# Enabled Stages make only sense when StopAfterFactor is 1 or 2.
#
# Default: Stages=1

Stages=1


# possible values for StopAfterFactor:
# 0: Do not stop the current assignment after a factor was found.
# 1: When a factor was found for the current assignment stop after the
#    current bitlevel. This makes only sense when Stages is enabled.
# 2: When a factor was found for the current assignment stop after the
#    current class.
#
# Default: StopAfterFactor=2

StopAfterFactor=2


# possible values for PrintMode:
# 0: print a new line for each finished class
# 1: overwrite the current line (more compact output)
#
# Default: PrintMode=1

PrintMode=1

# if V5UserID  and  ComputerID are specified, then the result lines in the results file will
# have the prefix "UID: user/host, " - the same way as prime95 does it.
# default: none (unset)
# V5UserID=your_primenet_ID
# ComputerID=mfakto

# TimeStampInResults allows to configure if each output line in the results file should be
# preceeded with a date-and-time stamp (similar to prime95)
#
# Default: TimeStampInResults=1

TimeStampInResults=1


# PrintFormat allows you to customize the progress output of mfakto. You can use any combination
# of up to 20 of the following format specifications, which will be replaced correspondingly
# in the progress line:
#  %C - class ID (n/4620)            "%4d"
#  %c - class number (n/960)         "%3d"
#  %p - percent complete (%)         "%5.1f"
#  %g - GHz-days/day (GHz)           "%7.2f"
#  %t - time per class (s)           "%6.0f"/"%6.1f"/"%6.2f"/"%6.3f"
#  %e - eta (d/h/m/s)                "%2dm%02ds"/"%2dh%02dm"/"%2dd%02dh"
#  %n - number of candidates (M/G)   "%6.2fM"/"%6.2fG"
#  %r - rate (M/s)                   "%6.2f"
#  %s - SievePrimes                  "%7d"
#  %w - CPU wait time for GPU (us)   "%6lld"
#  %W - CPU wait % (%)               "6.2f"
#  %d - date (Mon nn)                "%b %d"  (strftime format)
#  %T - time (HH:MM)                 "%H:%M"  (strftime format)
#  %U - username (as configured)     "%15s"   no fixed width, but truncated to 15 chars
#  %H - hostname (as configured)     "%15s"   no fixed width, but truncated to 15 chars
#  %M - the exponent being worked on "%-10u"
#  %l - the lower bit-limit          "%2d"
#  %u - the upper bit-limit          "%2d"
#
# Using the ProgressHeader you can specify a fixed string that is displayed as a header to the progress without any modification.

# mfaktc 0.20 format (default)
ProgressHeader=Date    Time | class   Pct |   time     ETA | GHz-d/day    Sieve     Wait
ProgressFormat=%d %T | %C %p%% | %t  %e |   %g  %s  %W%%

#
# old format
#ProgressHeader=      class |   # FCs |    time | avg. rate | SievePrimes |    ETA | CPU wait
#ProgressFormat=  %C/4620 | %n |  %ts | %rM/s |     %s | %e | %wus

# new format (default)
#ProgressHeader=  done |    ETA |     GHz |time/class|    #FCs | avg. rate | SieveP. |CPU idle
#ProgressFormat=%p% | %e | %g |  %ts | %n | %rM/s | %s | %W%

# full format
#ProgressHeader=[date    time] exponent [TF bits]: percent  class #, seq        GHz    time |    ETA |    #FCs |      rate |SieveP. | CPU idle,           user@host
#ProgressFormat=[%d %T] M%M[%l-%u]: %p% %C/4620,%c/960 %g %ts | %e | %n | %rM/s |%s | %wus = %W%, %U@%H


# allow the CPU to sleep if nothing can be preprocessed?
# 0: Do not sleep if the CPU must wait for the GPU
# 1: The CPU can sleep for a short time if it has to wait for the GPU
# Not currently used by mfakto, will most likely become obsolete. mfakto has
# no busy-loop, it is always waiting for an event to signal GPU thread
# completion.
#
# Default: AllowSleep=1

AllowSleep=1


# Different GPUs may have their best performance with different kernels
# Here, you can give a hint to mfakto on how to optimize the kernels.
#
# Possible values:
# GPUType=AUTO             try to auto-detect, if that does not work: let me know
# GPUType=GCN              Tahiti et al. (HD77xx-HD79xx), also assumed for unknown devices.
# GPUType=VLIW4            Cayman (HD69xx)
# GPUType=VLIW5            most other AMD GPUs (HD4xxx, HD5xxx, HD62xx-HD68xx)
# GPUType=APU              all APUs (C-30 - C-60, E-240 - E-450, A2-3200 - A8-3870K) not sure if the "small" APUs would work better as VLIW5.
# GPUType=CPU              all CPUs (when GPU not found, or forced to CPU)
# GPUType=NVIDIA           reserved for Nvidia-OpenCL. Currently mapped to "CPU" and not yet functional on Nvidia Hardware.
# GPUType=INTEL            reserved for Intel-OpenCL (e.g. HD4000). Not yet functional.
#
# Default: GPUType=AUTO 

GPUType=AUTO

# Allow to set the CPU affinity of the siever thread. It is a bit-mask,
# specified in decimal (sorry). CPU0=1, CPU1=2, CPU2=4, CPU3=8 ...
# e.g. 0=no limit, 5=CPU0+CPU2, 15=CPU0-3, 18446744073709551615=CPU0-63 (max value)
#
# Default: SieveCPUMask=0

SieveCPUMask=0

# The barrett15_75 kernel is 1-2% faster if we limit the exponent to
# 2^29 and k<2^60, using this switch (no effect on other kernels). The default
# keeps the original limits of exp<2^32 and k<2^64.
#
# Default: SmallExp=0

SmallExp=0


# Move the sieving to the GPU. This will free most of the CPU resources.
# 
# 

SieveOnGPU=1


# GPUSievePrimes defines how far we sieve the factor candidates on the GPU.
# It will automatically be adjusted to n*256+54.
# The first <GPUSievePrimes> primes are sieved. This parameter also influences
# the shared mem requirements according to this:
#  if (mystuff->gpu_sieve_primes < 54) shared_mem_required = 100;	// no sieving = 100%
#  else if (mystuff->gpu_sieve_primes < 310) shared_mem_required = 50;	// 54 primes expect 48.30%
#  else if (mystuff->gpu_sieve_primes < 1846) shared_mem_required = 38;	// 310 primes expect 35.50%
#  else if (mystuff->gpu_sieve_primes < 21814) shared_mem_required = 30;	// 1846 primes expect 28.10%
#  else if (mystuff->gpu_sieve_primes < 67894) shared_mem_required = 24;	// 21814 primes expect 21.93%
#  else shared_mem_required = 22;					// 67894 primes expect 19.94%
#
# Minimum: GPUSievePrimes=54
# Maximum: GPUSievePrimes=1075766
#
# Default: GPUSievePrimes=81157

GPUSievePrimes=81157


# GPUSieveSize defines how big of a GPU sieve we use (in M bits).
# Higher is usually faster, but the screen may lag easier.
# (GPUSieveSize * 1024) must be a multiple of GPUSieveProcessSize.
#
# Minimum: GPUSieveSize=4
# Maximum: GPUSieveSize=128
#
# Default: GPUSieveSize=96

GPUSieveSize=96


# GPUSieveProcessSize defines how many bits of the sieve each TF block
# processes (in K bits). Larger values may lead to less wasted cycles by
# reducing the number of times all threads in a warp are not TFing a
# candidate.  However, more shared memory is used which may reduce occupancy.
# (GPUSieveSize * 1024) must be a multiple of GPUSieveProcessSize.
#
# Possible values: 8,16,24,32
#
# Default: GPUSieveProcessSize=24

GPUSieveProcessSize=24


# MoreClasses is a switch for defining if 420 (2*2*3*5*7) or 4620 (2*2*3*5*7*11) classes of
# factor candidates should be used. Normally, 4620 gives better results but for very small classes
# 420 reduces the class initialization overhead enough to provide an overall benefit.
# Used only when sieving on the GPU; the CPU-sieve will always use 4620 classes.
#
# Possible values:
# MoreClasses=0 (use 420 classes)
# MoreClasses=1 (use 4620 classes)
#
# Default: MoreClasses=1

MoreClasses=1

# Newer AMD drivers cause high CPU load when many kernels are scheduled on the GPU. To avoid
# useless CPU cycles (busy wait), <FlushInterval> kernels will be scheduled at most. I saw CPU
# load to start with FlushInterval=8. FlushInterval=0 means disable this feature (schedule all
# kernels as fast as possible).
# The disadvantage is, that after enqueueing <FlushInterval> kernels, mfakto waits for the GPU
# queue to become empty, causing the GPU to idle for a brief moment until the next kernel is
# scheduled. Can cost ~ 1% performance.
# This setting is likely to disappear once I found a better way to circumvent this AMD bug.
# Since AMD Catalyst 14.4, this setting does not seem to make any difference at all - the 
# CPU load bug seems to be fixed.

# Possible values: 0 = off, >0 = OpenCL queue size limit

FlushInterval=0

# UseBinfile
# limit the amount of kernel recompilation
# Specify a file name to be used for caching the compiled OpenCL sources.
# The kernel build options are written to the file as well, and when different
# options are necessary, the kernel will be recompiled. Still there may be reasons
# to delete the binary file from time to time (after an mfakto upgrade or changing
# the kernel files, for instance).
# The file format consists of one line containing the build options, after that
# comes the compiled kernel as delivered by the driver (intended to be binary, but NV issues assembly).
# The AMD binary comes in a ELF format.
#
# no default: if empty, always recompile

UseBinfile=mfakto_Kernels.elf


##### Options for --perftest #####
#
# TestSieveSizes: a list of different SieveSizes to be tested with the CPU sieve.
#  comma-separated (no spaces) list of multiplicator values of ~12kB (which is the internal sieve chunk size of 13*17*19*23 bits)
# 30 values at most, no default (= skip this test)

TestSieveSizes=1,2,3,4,5,6,7,8,9,10,11,13,16,19,20,21,22,25,30,36,43,50,58,67,77,88,100,120,170


# TestSievePrimes: for each of the above SieveSizes, which SievePrimes values should be tested
#  comma-separated (no spaces) list of SievePrimes values. The SievePrimes values must be in
# the range 256..1000000, otherwise your hard-drive will be reformatted (it probably
# won't but I thought I'd warn you). Up to 8 of those fit on a 80 chars line.
# Used for both the CPU as well as the GPU sieve test.
# 30 values at most, no default (= skip this test), for example:
#
# 30000,36081,43393,52189,62766,75488,90788,109190,131321,157937,189949,228448,274751,330439,397413,477963,574838,691348,831474,1000000
# 256,396,611,945,1460,2257,3487,5389,8328,12871,19890,30738,47503,73411,113449,175323,270944,418716,647083,1000000
# 5000,10000,20000,40000,60000,80000,100000,200000,500000,1000000
# 25000,28391,32242,36616,41583,47223,53629,60904,69165,78547,89202,101302,115043,130649,148371,168497,191353,217309,246787,280263,318280,361453,410484,466165,529399,601210,682762,755377,880555,1000000
# 2000,2344,2748,3221,3775,4424,5186,6078,7124,8351,9788,11472,13447,15761,18473,21653,25376,29747,34867,40867,47901,56144,65807,77132,90407,105966,124203,145579,170634,200000

TestSievePrimes=54,396,611,945,1460,2257,3487,5389,8328,12871,19890,30738,47503,73411,113449,175323,270944,418716,647083,1075766

# TestGPUSieveSizes: the same for the GPU sieve, given in M bits, in the range 4..128
# Will be used together with the above TestSievePrimes to test the GPU sieve.
# 30 values at most, no default (= skip this test)

TestGPUSieveSizes=4,5,6,7,8,9,10,12,16,20,24,36,48,96,101,102,103,104,105,106,120,121,123,124,125,126,127,128

# TestExponents: a list of exponents to test the TF kernels with. This list is the same for GPU-sieve-based and CPU-sieve kernels.

TestExponents=2000093,39000037,66362159,74000077,78000071,332900047,999900079,2001862367,4201971233

# OCLCompileOptions
# for debugging purposes: overrides the default compile options for the kernels
#
# default: -I. -DVECTOR_SIZE=%d -DMORE_CLASSES
# depending on other settings: -g / -O3, -DCHECKS_MODBASECASE, -DCL_GPU_SIEVE, -DSMALL_EXP
#
# Other useful settings: -save-temps for keeping .il and .isa files

# OCLCompileOptions=-I. -DVECTOR_SIZE=4 -DMORE_CLASSES -g -DCL_GPU_SIEVE
