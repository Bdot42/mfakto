# Version 0.15

# Verbosity: defines the amount of screen output from mfakto. Overridden by the
# command-line option -v
# 0 = terse
# 1 = normal
# 2 = verbose
# 3 = debug (also displays the OpenCL compile log and the results array of each
#     kernel invocation)
#
# Default: Verbosity=1

Verbosity=1


# SievePrimes defines how far the factor candidates (FCs) are pre-sieved on the
# CPU. The first <SievePrimes> odd primes are used to sieve the FCs.
#
# Minimum: SievePrimes=SievePrimesMin
# Maximum: SievePrimes=SievePrimesMax
#
# Default: SievePrimes=25000

SievePrimes=25000


# Automatically adjust SievePrimes based on average CPU wait during run time
# 0 = use the fixed value above
# 1 = enabled
#
# Default: SievePrimesAdjust=1

SievePrimesAdjust=1


# SievePrimesMin defines the lower limit for SievePrimes. Lower values may
# reduce CPU consumption while higher values improve efficiency at the cost of
# more CPU resources. Lowering this value below 5000 is not advised as
# that dramatically reduces the quality of the sieve and increases the share of
# wasted GPU cycles due to testing composite factor candidates.
#
# Only used when SievePrimesAdjust=1
#
# Minimum: SievePrimesMin=256
# Maximum: SievePrimesMin=999999
#
# Default: SievePrimesMin=5000

SievePrimesMin=5000


# SievePrimesMax defines the upper limit for SievePrimes. Lower values reduce
# main memory consumption (approximately 8000 * SievePrimesMax / 1000 in bytes)
# while higher values allow for more sieving given enough CPU resources.
#
# Only used when SievePrimesAdjust=1
#
# Minimum: SievePrimesMax=5000
# Maximum: SievePrimesMax=1000000
#
# Default: SievePrimesMax=200000

SievePrimesMax=200000


# Defines the sieve block size in kiB. Only used if SIEVE_SIZE_LIMIT was not
# set during compilation.
# For small SievePrimes values starting at ~100000, the L1 cache size is a good
# choice. Intel CPUs usually have 32 kiB while most AMD processors have 64 kiB.
# However, the L1 cache is only 16 kiB on Bulldozer, so it makes more sense to
# use the L2 cache size, 256 kiB.
#
# Larger values are generally better. You can use the --perftest option to find
# the best values.
#
# Minimum: SieveSizeLimit=12
# Maximum: SieveSizeLimit=2000 (not enforced, but maximum useful value)
#
# Default: SieveSizeLimit=64

SieveSizeLimit=64


# Sets the number of data sets to use.
# mfakto can process one data set on the GPU while the CPU prepares the next
# one. The time needed to transfer the data sets from the CPU to the GPU can be
# reduced when NumStreams=2 or greater. It is recommended to use NumStreams=3
# on Linux systems and higher values on Windows. A larger number increases both
# the host and GPU memory used by mfakto.
#
# Minimum: NumStreams=1
# Maximum: NumStreams=10
#
# Default: NumStreams=3

NumStreams=3


# Sets the number of factor candidates a single GPU thread will test in
# parallel. A larger value increases the execution unit utilization but
# requires more registers. If mfakto needs more storage than available, then
# the slower scratchpad memory will be used. On most hardware, this happens at
# a vector size of 8 or above.
# Testing on a Radeon HD 6870 has shown that VectorSize=8 is the fastest for
# the barrett92 (about 0.8% faster than VectorSize=4 in this case) and
# barrett24 kernels. For everything else, a vector size of 4 gives the best
# performance.
# It is recommended to use VectorSize=2 on the Radeon HD 7700 - 7900 series as
# there are less registers available.
#
# Allowed values: 1, 2, 4, 8, 16
#
# Default: VectorSize=2

VectorSize=2


# GridSize sets how many GPU threads are started at once. Only used when
# sieving on the GPU.
#   GridSize = 0: threads per grid =  131072
#   GridSize = 1: threads per grid =  262144
#   GridSize = 2: threads per grid =  524288
#   GridSize = 3: threads per grid = 1048576
#   GridSize = 4: threads per grid = 2097152
# A smaller value results in more overhead for long-running jobs but can
# slightly improve performance for very small assignments. It directly reduces
# the run time per kernel launch and can result in better responsiveness,
# especially on older GPUs.
#
# Default: GridSize=4

GridSize=4


# WorkFile: the name of the file containing the factoring assignments.
#
# Examples:
# worktodo.txt - same as Prime95
# worktodo.ini - used by Prime95 in versions prior to 25.15
#
# Default: WorkFile=worktodo.txt

WorkFile=worktodo.txt

# ResultsFile: the name of the file which will contain the factoring results.
#
# Default: ResultsFile=results.txt

ResultsFile=results.txt


# Checkpoints allow mfakto to resume an assignment from a previous session.
# mfakto can write a checkpoint after finishing a class.
# 0 = disable checkpoints
# 1 = enable checkpoints and use CheckpointDelay to set the interval
# n = write a checkpoint after testing n classes, for n > 1
# Use Checkpoints=961 or above to never write a checkpoint except when Ctrl + C
# is used to abort mfakto.
#
# Default: Checkpoints=1

Checkpoints=1


# CheckpointDelay is the minimum time in seconds between checkpoint writes.
# Only evaluated when Checkpoints=1
#
# Minimum: CheckpointDelay=0 (write a checkpoint after each class)
# Maximum: CheckpointDelay=3600
#
# Default: CheckpointDelay=300

CheckpointDelay=300

# Allows assignments to be split into multiple bit ranges.
# Note that many mfakto kernels can handle only one bit level at a time and
# require Stages=1 to use.
# 0 = disabled
# 1 = enabled
#
# Default: Stages=1

Stages=1


# possible values for StopAfterFactor:
# 0 = Always finish the current assignment even after finding a factor.
# 1 = Stop at the current bit level after finding a factor. Only makes sense
#     when Stages is enabled.
# 2 = Stop at the current class after finding a factor.
#
# Default: StopAfterFactor=2

StopAfterFactor=2


# possible values for PrintMode:
# 0 = print a new line for each finished class
# 1 = update the current line for a more compact output
#
# Default: PrintMode=1

PrintMode=1

# Prepend a user ID and computer name to each result in the results file,
# similar to Prime95 and mprime. Both V5UserID and ComputerID must be set to
# enable this feature.
#
# default: none (unset)

#V5UserID=<PrimeNet ID>
#ComputerID=<hostname>

# TimeStampInResults determines whether each line in the results file is
# preceded with a timestamp (similar to Prime95 and mprime)
# 0 = disabled
# 1 = enabled
#
# Default: TimeStampInResults=1

TimeStampInResults=1


# PrintFormat allows the progress output to be customized. You can use any
# combination of the following format specifications:
#  %C - class ID (of 4620)           "%4d"
#  %c - class number (of 960)        "%3d"
#  %p - percent complete (%)         "%5.1f"
#  %g - GHz-days/day                 "%7.2f"
#  %t - time per class (s)           "%6.0f" / "%6.1f" / "%6.2f" / "%6.3f"
#  %e - ETA (d/h/m/s)                "%2dm%02ds" / "%2dh%02dm" / "%2dd%02dh"
#  %n - number of candidates (M/G)   "%6.2fM" / "%6.2fG"
#  %r - rate (M/s)                   "%6.2f"
#  %s - SievePrimes                  "%7d"
#  %w - CPU wait time (us)           "%6lld"
#  %W - CPU wait percentage (%)      "%6.2f"
#  %d - date (Mon nn)                "%b %d"  (strftime format)
#  %T - time (HH:MM)                 "%H:%M"  (strftime format)
#  %U - username (as configured)     "%15s"   up to 15 characters
#  %H - hostname (as configured)     "%15s"   up to 15 characters
#  %M - current exponent             "%-10u"
#  %l - starting bit level           "%2d"
#  %u - ending bit level             "%2d"
#
# ProgressHeader specifies a fixed string to be displayed as a header.

# mfaktc 0.20 format (default)
ProgressHeader=Date    Time | class   Pct |   time     ETA | GHz-d/day    Sieve     Wait
ProgressFormat=%d %T | %C %p%% | %t  %e |   %g  %s  %W%%

# old format
#ProgressHeader=      class |   # FCs |    time | avg. rate | SievePrimes |    ETA | CPU wait
#ProgressFormat=  %C/4620 | %n |  %ts | %rM/s |     %s | %e | %wus

# new format
#ProgressHeader=  done |    ETA |     GHz |time/class|    #FCs | avg. rate | SieveP. |CPU idle
#ProgressFormat=%p% | %e | %g |  %ts | %n | %rM/s | %s | %W%

# full format
#ProgressHeader=[date    time] exponent [TF bits]: percent  class #, seq        GHz    time |    ETA |    #FCs |      rate |SieveP. | CPU idle,           user@host
#ProgressFormat=[%d %T] M%M[%l-%u]: %p% %C/4620,%c/960 %g %ts | %e | %n | %rM/s |%s | %wus = %W%, %U@%H


# allow the CPU to sleep when idle?
# 0 = Do not sleep while waiting for the GPU
# 1 = The CPU can sleep for a short time while waiting for the GPU
# Currently unused. mfakto does not use busy waiting and is always waiting for
# an event to signal thread completion.
#
# Default: AllowSleep=1

# AllowSleep=1


# Different GPUs may perform better with certain kernels.
# Here, you can tell mfakto how to optimize them.
#
# Possible values:
# GPUType=AUTO      try to auto-detect the device
# GPUType=GCN       most recent AMD GPUs. Also assumed for unknown devices.
# GPUType=VLIW4     TeraScale 3 devices, such as the Radeon HD 6900 series.
# GPUType=VLIW5     TeraScale 2 devices, such as the Radeon HD 5000 series.
# GPUType=APU       all APUs. It has been noted that using GPUType=VLIW5 may
#                   result in better performance on low-end devices.
# GPUType=CPU       all CPUs. Used when the GPU is not found or when the "-d c"
#                   option is specified.
# GPUType=NVIDIA    reserved for Nvidia devices. Currently mapped to "CPU" and
#                   not yet functional on Nvidia hardware.
# GPUType=INTEL     Intel integrated GPUs. Functional but fails on macOS.
#
# Default: GPUType=AUTO

GPUType=AUTO

# Binds the sieving thread to specific cores. It is a bit mask in decimal
# representation. Each bit represents a processor, and the bit number is equal
# to the processor number. For example:
#   1   = 0b1     -> core 0
#   2   = 0b10    -> core 1
#   5   = 0b101   -> cores 0 and 2
#   15  = 0b1111  -> cores 0 to 3
#
# Only used when sieving on the CPU and not supported on macOS.
#
# Minimum: SieveCPUMask=0 (no limit)
# Maximum: SieveCPUMask=18446744073709551615 (use 64 cores)
#
# Default: SieveCPUMask=0

SieveCPUMask=0

# The barrett15_75 kernel is up to 2% faster with reduced limits. SmallExp
# modifies them as follows:
#   exponents < 29 bits (from 32 bits)
#   k         < 60 bits (from 64 bits)
#
# This setting does not affect other kernels.
#
# Default: SmallExp=0

SmallExp=0


# Do the sieving on the GPU. This will free most CPU resources.
#
# Default: SieveOnGPU=1

SieveOnGPU=1


# GPUSievePrimes defines how far we sieve the factor candidates on the GPU.
# It will automatically be adjusted to n*256+54.
# The first <GPUSievePrimes> primes are sieved. This parameter also influences
# the shared mem requirements according to this:
#  if (mystuff->sieve_primes < 54) shared_mem_required = 100;	// no sieving = 100%
#  else if (mystuff->sieve_primes < 310) shared_mem_required = 50;	// 54 primes expect 48.30%
#  else if (mystuff->sieve_primes < 1846) shared_mem_required = 38;	// 310 primes expect 35.50%
#  else if (mystuff->sieve_primes < 21814) shared_mem_required = 30;	// 1846 primes expect 28.10%
#  else if (mystuff->sieve_primes < 67894) shared_mem_required = 24;	// 21814 primes expect 21.93%
#  else shared_mem_required = 22;					// 67894 primes expect 19.94%
#
# Minimum: GPUSievePrimes=54
# Maximum: GPUSievePrimes=1075766
#
# Default: GPUSievePrimes=81157

GPUSievePrimes=81157


# GPUSieveSize defines the size of the GPU sieve to use, in Mib.
# Higher is usually faster, but the screen may lag more.
# GPUSieveSize * 1024 must be a multiple of GPUSieveProcessSize.
#
# Minimum: GPUSieveSize=4
# Maximum: GPUSieveSize=128
#
# Default: GPUSieveSize=96

GPUSieveSize=96


# GPUSieveProcessSize defines the size of the sieve each TF block
# processes, in Kib. Larger values may lead to less wasted cycles by
# reducing how often the threads in a warp are idle. However, this may reduce
# occupancy due to increased shared memory usage.
#
# Possible values: 8, 16, 24, 32
# Also must divide GPUSieveSize * 1024
#
# Default: GPUSieveProcessSize=24

GPUSieveProcessSize=24


# MoreClasses defines whether 420 (2*2*3*5*7) or 4620 (2*2*3*5*7*11) classes of
# factor candidates should be used. 4620 normally gives better results, but for
# very small classes, 420 reduces the class initialization overhead enough to
# provide overall improvements.
# Used only when SieveOnGPU=1 as the CPU sieve always uses 4620 classes.
#
# Possible values:
# 0 = use 420 classes
# 1 = use 4620 classes
#
# Default: MoreClasses=1

MoreClasses=1

# Some AMD drivers cause high CPU load when many kernels are scheduled on the
# GPU. To avoid busy waiting and wasted CPU cycles, mfakto schedules at most
# <FlushInterval> kernels. It has been observed that the CPU load starts to
# increase at FlushInterval=8 or greater.
# The disadvantage is that mfakto waits for the GPU queue to become empty after
# enqueueing <FlushInterval> kernels, making the GPU briefly idle until the
# next kernel is scheduled. Can cost around 1% performance.
#
# Possible values:
# 0 = disabled (schedule all kernels as fast as possible)
# n = OpenCL queue size limit for n > 0
#
# This setting is likely to disappear as Catalyst 14.4 and later do not seem to
# be affected by the CPU load issue.

FlushInterval=0

# UseBinfile: specifies an ELF file to be used for caching the compiled OpenCL
# sources, reducing kernel recompilation. It contains the kernel build options
# and will be recompiled when different options are used. However, there may be
# reasons to manually delete the file, such as after an mfakto upgrade. The
# format consists of one line containing the build options, followed by the
# compiled kernel as delivered by the driver.
#
# no default: always recompile if empty

UseBinfile=mfakto_Kernels.elf


##### Options for --perftest #####

# TestSieveSizes: used to test the CPU sieve. Values are multipliers of ~12 kB,
# the internal sieve chunk size of 13 * 17 * 19 * 23 bits.
#
# Allowed values:
# Comma-separated list without spaces.
# Can have up to 30 values.
#
# no default: skipped if empty

TestSieveSizes=1,2,3,4,5,6,7,8,9,10,11,13,16,19,20,21,22,25,30,36,43,50,58,67,77,88,100,120,170


# TestSievePrimes: the SievePrimes values to be tested for the above sieve
# sizes. Used for both the CPU and GPU sieve tests.
#
# Allowed values:
# Comma-separated list without spaces.
# Can have up to 30 values in the 256 – 1000000 range.
#
# Some examples:
# 30000,36081,43393,52189,62766,75488,90788,109190,131321,157937,189949,228448,274751,330439,397413,477963,574838,691348,831474,1000000
# 256,396,611,945,1460,2257,3487,5389,8328,12871,19890,30738,47503,73411,113449,175323,270944,418716,647083,1000000
# 5000,10000,20000,40000,60000,80000,100000,200000,500000,1000000
# 25000,28391,32242,36616,41583,47223,53629,60904,69165,78547,89202,101302,115043,130649,148371,168497,191353,217309,246787,280263,318280,361453,410484,466165,529399,601210,682762,755377,880555,1000000
# 2000,2344,2748,3221,3775,4424,5186,6078,7124,8351,9788,11472,13447,15761,18473,21653,25376,29747,34867,40867,47901,56144,65807,77132,90407,105966,124203,145579,170634,200000
#
# no default: skipped if empty

TestSievePrimes=54,396,611,945,1460,2257,3487,5389,8328,12871,19890,30738,47503,73411,113449,175323,270944,418716,647083,1075766

# TestGPUSieveSizes: the sieve sizes used to test the GPU sieve, in Mib.
# Uses the TestSievePrimes values defined above.
#
# Allowed values:
# Comma-separated list without spaces.
# Can have up to 30 values in the 4 – 128 range.
#
# no default: skipped if empty

TestGPUSieveSizes=4,5,6,7,8,9,10,12,16,20,24,36,48,96,101,102,103,104,105,106,120,121,123,124,125,126,127,128

# TestExponents: exponents to use when testing the TF kernels. Used by both the
# GPU and CPU sieving kernels.
#
# Allowed values:
# Comma-separated list without spaces. Exponents are limited to 32 bits.

TestExponents=2000093,39000037,66362159,74000077,78000071,332900047,999900079,2001862367,4201971233

##### Debugging options #####

# OCLCompileOptions: overrides the default compile options for the kernels.
#
# default: -I. -DVECTOR_SIZE=%d -DMORE_CLASSES
# depending on other settings: -g / -O3, -DCHECKS_MODBASECASE, -DCL_GPU_SIEVE, -DSMALL_EXP
#
# Other useful settings: -save-temps for keeping .il and .isa files

# OCLCompileOptions=-I. -DVECTOR_SIZE=4 -DMORE_CLASSES -g -DCL_GPU_SIEVE
