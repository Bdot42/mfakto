# SievePrimes defines how far the factor candidates (FCs) are presieved on the
# CPU. The first <SievePrimes> odd primes are used to sieve the FCs.
#
# Minimum: SievePrimes=SievePrimesMin
# Maximum: SievePrimes=SievePrimesMax
#
# Default: SievePrimes=25000

SievePrimes=25000


# Set this to 1 to enable automatically adjustments of SievePrimes during
# runtime based on the "average wait times". 0 uses the fixed value above.
#
# Default: SievePrimesAdjust=1

SievePrimesAdjust=1


# If SievPrimesAdjust=1, then SievePrimesMin defines the lower limit for
# SievePrimes. Lower values may reduce CPU consumption.
# Higher values enforce a higher TF efficiency at the cost of more
# CPU resources. Lowering this value below 5000 is not advised as
# that dramatically reduces the quality of the siever output, leading
# to more futile work of the GPU.
#
# Minimum: SievePrimesMin=256
# Maximum: SievePrimesMin=999999
#
# Default: SievePrimesMin=5000

SievePrimesMin=5000


# If SievPrimesAdjust=1, then SievePrimesMax defines the upper limit for
# SievePrimes. Lower values reduce main memory consumption
# (8k per 1k SievePrimesMax). Higher values allow for higher sieving if enough
# CPU resources are available.
#
# Minimum: SievePrimesMax=5000
# Maximum: SievePrimesMax=1000000
#
# Default: SievePrimesMax=200000

SievePrimesMax=200000


# The following value is used only, if SIEVE_SIZE_LIMIT was not set to a
# fix value at compile time.
# Define the block size of the sieve in kiB. For small SievePrimes values, the
# size of the L1 cache is a good choice, starting at SievePrimes ~ 100000,
# bigger values are more efficient. Use mfakto --perftest to test your CPU
# for the best values. Intel CPUs often have 32 kiB L1 cache, AMD 64 kiB,
# Bulldozer 16 kiB. On Bulldozer, however, it makes more sense to use the
# L2 cache size, 256 kiB.
#
# Minimum: SieveSizeLimit=12
# Maximum: SieveSizeLimit=2000   (not enforced, but maximum useful value)
#
# Default: SieveSizeLimit=64

SieveSizeLimit=64


# Set the number of data sets used by mfakto.
# NumStreams must be >= 1. In this case mfakto can process one
# data set on the GPU while the CPU preprocesses the next one. When
# NumStreams is >= 2 than the time needed to upload (CPU->GPU transfer)
# the data sets can be hidden (if the hardware supports it, but OpenCL
# does not yet support this).
# On Linux systems 3 seems a good number. There are comments that
# Windows systems need a greater number of streams.
# A greater number increases the memory consumed by mfakto (host and GPU
# memory). The current limit for the number of streams is 10!
#
# Default: NumStreams=3

NumStreams=5


# Set the number of factor candidates that a single GPU-thread will work
# on in parallel. This increases the execution unit utilization but
# requires more registers. When more space is needed than available in
# registers, then (slow) scratchpad memory (global memory) will be used.
# On most hardware this will start happening at vector size 8.
# On a HD6870, a vector size of 4 is fastest except for the barrett_92
# kernel which runs about 0.8% faster with vector size 8.
# The barrett24 kernel is fastest with vector size 8.
# Allowed sizes are 1, 2, 4, 8, 16.
#
# Default: VectorSize=4

VectorSize=4


# The GridSize sets the number of threads per grid (how many GPU threads are
# started at once).
#   GridSize = 0: threads per grid =  131072
#   GridSize = 1: threads per grid =  262144
#   GridSize = 2: threads per grid =  524288
#   GridSize = 3: threads per grid = 1048576
#   GridSize = 4: threads per grid = 2097152
# A smaller GridSize has more overhead than a bigger GridSize for long
# running jobs. For really small jobs there can be a small benefit on
# computation time if the GridSize is small. A smaller GridSize directly
# reduces the runtime per kernel launch and might result in a better
# interactivity and may be required for a stable UI on slower GPUs.
#
# Default: GridSize=4

GridSize=4


# WorkFile: the name of the file which contains the factoring assignments.
# e.g.
# worktodo.ini (Prime95 v24 and earlier)
# worktodo.txt (Prime95 v25 and newer)
#
# Default: WorkFile=worktodo.txt

WorkFile=worktodo.txt

# ResultsFile: the name of the file which contains the factoring results.
#
# Default: ResultsFile=results.txt

ResultsFile=results.txt


# Checkpoints=0: disable checkpoints
# Checkpoints=1: enable checkpoints
# Checkpoints=n, n>1: write a checkpoint after n classes have been tested
# Checkpoints are needed for resume capability. After a class is finished a
# checkpoint file can be written. When mfaktc is interrupted during the run and
# restarted later it will begin at the last processed class.
# Use Checkpoints=961 (or bigger) to never write a checkpoint except when ^C
# is used to abort mfakto.
#
# Default: Checkpoints=1

Checkpoints=1


# CheckpointDelay is the minimum time in seconds between two checkpoint writes.
# Only evaluated if Checkpoints=1
# Allowed values are 0 <= CheckpointDelay <= 3600.
#
# Minimum: CheckpointDelay=0   (write a checkpoint after each class)
# Maximum: CheckpointDelay=3600
#
# Default: CheckpointDelay=300

CheckpointDelay=300

# Allow to split an assignment into multiple bit ranges.
# Note that many mfakto-kernels can handle only one bit level at a time,
# i.e. in order to use them, Stages needs to be enabled.
# 0 = disabled
# 1 = enabled
# Enabled Stages make only sense when StopAfterFactor is 1 or 2.
#
# Default: Stages=1

Stages=1


# possible values for StopAfterFactor:
# 0: Do not stop the current assignment after a factor was found.
# 1: When a factor was found for the current assignment stop after the
#    current bitlevel. This makes only sense when Stages is enabled.
# 2: When a factor was found for the current assignment stop after the
#    current class.
#
# Default: StopAfterFactor=1

StopAfterFactor=2


# possible values for PrintMode:
# 0: print a new line for each finished class
# 1: overwrite the current line (more compact output)
#
# Default: PrintMode=0

PrintMode=0

# if V5UserID  and  ComputerID are specified, then the result lines in the results file will
# have the prefix "UID: user/host, " - the same way as prime95 does it.
# default: none (unset)
# V5UserID=your_primenet_ID
# ComputerID=mfakto

# TimeStampInResults allows to configure if each output line in the results file should be
# preceeded with a date-and-time stamp (similar to prime95)
#
# Default: TimeStampInResults=0

TimeStampInResults=0


# PrintFormat allows to customize the progress output of mfakto. You can use any combination
# of up to 20 of the following format specifications, which will be replaced correspondingly
# in the progress line:
#  %C - class ID (n/4620)            "%4d"
#  %c - class number (n/960)         "%3d"
#  %p - percent complete (%)         "%6.2f"
#  %g - GHz-days/day (GHz)           "%7.2f"
#  %t - time per class (s)           "%6.0f"/"%6.1f"/"%6.2f"/"%6.3f"
#  %e - eta (d/h/m/s)                "%2dm%02ds"/"%2dh%02dm"/"%2dd%02dh"
#  %n - number of candidates (M/G)   "%6.2fM"/"%6.2fG"
#  %r - rate (M/s)                   "%6.2f"
#  %s - SievePrimes                  "%7d"
#  %w - CPU wait time for GPU (us)   "%6lld"
#  %W - CPU wait % (%)               "6.2f"
#  %d - date (Mon nn)                "%b %d"  (strftime format)
#  %T - time (HH:MM)                 "%H:%M"  (strftime format)
#  %U - username (as configured)     "%15s"   no fixed width, but truncated to 15 chars
#  %H - hostname (as configured)     "%15s"   no fixed width, but truncated to 15 chars
#  %M - the exponent being worked on "%d"     no fixed width
#  %l - the lower bit-limit          "%2d"
#  %u - the upper bit-limit          "%2d"
#
# Using the ProgressHeader you can specify a fix string that is displayed as a header to the progress without any modification.
#
# old format
#ProgressHeader=      class |   # FCs |    time | avg. rate | SievePrimes |    ETA | CPU wait
#PrintFormat=  %C/4620 | %n |  %ts | %rM/s |     %s | %e | %wus

# new format (default)
#ProgressHeader=   done |    ETA |     GHz |time/class|    #FCs | avg. rate | SieveP. |CPU idle
#PrintFormat=%p% | %e | %g |  %ts | %n | %rM/s | %s | %W%

# full format
#ProgressHeader=[date    time]     exp[TF bits]: percent   class #, seq        GHz    time |    ETA |    #FCs |      rate |SieveP. | CPU idle,           user@host
#PrintFormat=[%d %T] M%M[%l-%u]: %p% %C/4620,%c/960 %g %ts | %e | %n | %rM/s |%s | %wus = %W%, %U@%H


# allow the CPU to sleep if nothing can be preprocessed?
# 0: Do not sleep if the CPU must wait for the GPU
# 1: The CPU can sleep for a short time if it has to wait for the GPU
# Not currently used by mfakto, will most likely become obsolete. mfakto has
# no busy-loop, it is always waiting for an event to signal GPU thread
# completion.
#
# Default: AllowSleep=1

AllowSleep=1


# Cayman cards have their best performance with different kernels
# than HD5xxx and HD4xxx - test it out what gives better results for you
# HD6870 still runs better with mfakto_cl_barrett79 ...
#
# for HD4xxx, HD5xxx and some HD6xxx:
# PreferKernel=mfakto_cl_barrett79
# for Cayman and most likely also for HD7xxx
# PreferKernel=mfakto_cl_71
#
# Default: PreferKernel=mfakto_cl_barrett79

#PreferKernel=mfakto_cl_71
PreferKernel=mfakto_cl_barrett79


# The barrett15_75 kernel is 1-2% faster if we can limit the exponent to
# 2^29 and k<2^60, using this switch (no effect on other kernels). The default
# keeps the original limits of exp<2^32 and k<2^64
#
# Default: SmallExp=0

SmallExp=0


# move the sieving to the GPU. This will free most of the CPU resources,
# but reduce throughput quite a bit
# THIS IS STILL EXPERIMENTAL AND DOES NOT WORK - DO NOT USE
SieveOnGPU=0

